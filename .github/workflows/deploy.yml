name: Deploy to Laborly Server

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate .env file
        run: |
          cat <<EOF > .env
          APP_NAME=${{ secrets.APP_NAME }}
          DEBUG=${{ secrets.DEBUG }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ALGORITHM=${{ secrets.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_DB=${{ secrets.REDIS_DB }}
          TEST_DATABASE_URL=${{ secrets.TEST_DATABASE_URL }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}#
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM=${{ secrets.MAIL_FROM }}
          MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}
          MAIL_SERVER=${{ secrets.MAIL_SERVER }}
          MAIL_PORT=${{ secrets.MAIL_PORT }}
          MAIL_STARTTLS=${{ secrets.MAIL_STARTTLS }}
          MAIL_SSL_TLS=${{ secrets.MAIL_SSL_TLS }}
          MAIL_USE_CREDENTIALS=${{ secrets.MAIL_USE_CREDENTIALS }}
          MAIL_VALIDATE_CERTS=${{ secrets.MAIL_VALIDATE_CERTS }}
          MAIL_TEMPLATE_FOLDER=${{ secrets.MAIL_TEMPLATE_FOLDER }}
          BASE_URL=${{ secrets.BASE_URL }}
          SUPPORT_EMAIL=${{ secrets.SUPPORT_EMAIL }}
          EMAIL_VERIFICATION_TOKEN_EXPIRE_MINUTES=${{ secrets.EMAIL_VERIFICATION_TOKEN_EXPIRE_MINUTES }}
          PASSWORD_RESET_TOKEN_EXPIRE_MINUTES=${{ secrets.PASSWORD_RESET_TOKEN_EXPIRE_MINUTES }}
          NEW_EMAIL_VERIFICATION_TOKEN_EXPIRE_MINUTES=${{ secrets.NEW_EMAIL_VERIFICATION_TOKEN_EXPIRE_MINUTES }}
          MAX_FAILED_ATTEMPTS=${{ secrets.MAX_FAILED_ATTEMPTS }}
          IP_PENALTY_DURATION=${{ secrets.IP_PENALTY_DURATION }}
          FAILED_ATTEMPTS_WINDOW=${{ secrets.FAILED_ATTEMPTS_WINDOW }}
          CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
          OAUTH_STATE_TOKEN_EXPIRE_MINUTES=${{ secrets.OAUTH_STATE_TOKEN_EXPIRE_MINUTES }}
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          EOF

      - name: Stop existing containers
        run: docker-compose down || true

      - name: Build and start containers
        run: |
          docker-compose down --volumes --remove-orphans || true
          docker-compose up -d --build

      - name: Wait for Redis to be healthy
        run: |
          timeout=30
          echo "Waiting for Redis to be ready..."
          while ! docker exec redis redis-cli ping | grep -q 'PONG'; do
            sleep 1
            timeout=$((timeout - 1))
            if [ $timeout -le 0 ]; then
              echo "Redis failed to start"
              exit 1
            fi
          done
          echo "âœ… Redis is ready!"

      # - name: Run Pytest
      #   run: |
      #     timeout 5m docker-compose run --rm test

      - name: Print container logs if test fails
        if: ${{ failure() }}
        run: |
          docker-compose logs test
          docker-compose logs redis  

      - name: Run Certbot for SSL (first time only)
        run: docker-compose run --rm certbot || true

      - name: Restart NGINX to apply HTTPS
        run: docker-compose restart nginx
        

        
        