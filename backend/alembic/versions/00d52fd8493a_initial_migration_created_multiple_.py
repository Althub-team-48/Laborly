"""Initial Migration Created multiple tables

Revision ID: 00d52fd8493a
Revises: 
Create Date: 2025-04-06 01:05:31.562932

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '00d52fd8493a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('CLIENT', 'WORKER', 'ADMIN', name='userrole'), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('middle_name', sa.String(length=100), nullable=True),
    sa.Column('profile_picture', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_frozen', sa.Boolean(), nullable=False),
    sa.Column('is_banned', sa.Boolean(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone_number')
    )
    op.create_table('client_profiles',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for a client profile'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Related user account'),
    sa.Column('business_name', sa.String(), nullable=True, comment='Optional business name'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Profile creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Profile update timestamp'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('favorites',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for a favorite entry'),
    sa.Column('client_id', sa.UUID(), nullable=False, comment='Client who favorited the worker'),
    sa.Column('worker_id', sa.UUID(), nullable=False, comment='Favorited worker'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Timestamp when the favorite was created'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Timestamp when the favorite was last updated'),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['worker_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('jobs',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the job'),
    sa.Column('client_id', sa.UUID(), nullable=False, comment='Client who created the job'),
    sa.Column('worker_id', sa.UUID(), nullable=False, comment='Worker assigned to the job'),
    sa.Column('service_id', sa.UUID(), nullable=True, comment='Service related to the job'),
    sa.Column('status', sa.Enum('NEGOTIATING', 'ACCEPTED', 'COMPLETED', 'FINALIZED', 'CANCELLED', name='jobstatus'), nullable=False, comment='Current status of the job'),
    sa.Column('started_at', sa.DateTime(), nullable=True, comment='Timestamp when the job started'),
    sa.Column('completed_at', sa.DateTime(), nullable=True, comment='Timestamp when the job was completed'),
    sa.Column('cancelled_at', sa.DateTime(), nullable=True, comment='Timestamp when the job was cancelled'),
    sa.Column('cancel_reason', sa.Text(), nullable=True, comment='Reason provided for job cancellation'),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['worker_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('kyc',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('document_type', sa.String(length=50), nullable=False),
    sa.Column('document_path', sa.String(), nullable=False),
    sa.Column('selfie_path', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', name='kycstatus'), nullable=False),
    sa.Column('submitted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('services',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the service'),
    sa.Column('worker_id', sa.UUID(), nullable=False, comment='Worker (user) offering this service'),
    sa.Column('title', sa.String(length=100), nullable=False, comment='Title or name of the service'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed description of the service'),
    sa.Column('location', sa.String(length=100), nullable=True, comment='Location where the service is offered'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the service was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the service was last updated'),
    sa.ForeignKeyConstraint(['worker_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('worker_profiles',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for a worker profile'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Related user account'),
    sa.Column('bio', sa.Text(), nullable=True, comment='Short biography of the worker'),
    sa.Column('years_experience', sa.Integer(), nullable=True, comment='Number of years of experience'),
    sa.Column('availability_note', sa.Text(), nullable=True, comment='Custom note about availability'),
    sa.Column('is_available', sa.Boolean(), nullable=False, comment='Availability status for job assignments'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Timestamp when the profile was created'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Timestamp when the profile was last updated'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('reviews',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('reviewer_id', sa.Uuid(), nullable=False),
    sa.Column('worker_id', sa.Uuid(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('text', sa.Text(), nullable=True),
    sa.Column('is_flagged', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ),
    sa.ForeignKeyConstraint(['reviewer_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['worker_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('job_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reviews')
    op.drop_table('worker_profiles')
    op.drop_table('services')
    op.drop_table('kyc')
    op.drop_table('jobs')
    op.drop_table('favorites')
    op.drop_table('client_profiles')
    op.drop_table('users')
    # ### end Alembic commands ###
